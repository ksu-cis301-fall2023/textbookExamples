//We will see that our postconditions for findMax come directly from the different claims in that assert. 
//In our calling code, we call findMax with num1 (which has the value 3) and num2 (which has the value 2). We are able to prove that findMax returns 2:

import org.sireum.logika._

//find the max between x and y
def findMax(x: Z, y: Z): Z = {
    l"""{
        //no precondition needed
        ensures
            result >= x                 //postcondition 1
            result >= y                 //postcondition 2
            result == x v result == y   //postcondition 3
    }"""

    var max: Z = 0

    l"""{
        1. max == 0             premise
    }"""

    if (x > y) {
        l"""{
            1. max == 0         premise
            2. x > y            premise     //IF condition is true
        }"""

        max = x

        l"""{
            1. max == x         premise
            2. max >= x         algebra 1
            3. x > y            premise
            4. max >= y         algebra 1 3
        }"""

    } else {
        l"""{
            1. max == 0         premise
            2. ¬(x > y)         premise     //IF condition is not true
            3. x <= y           algebra 2
        }"""

        max = y
        l"""{
            1. max == y         premise
            2. x <= y           premise
            3. max >= x         algebra 1 2
            4. max >= y         algebra 1
        }"""
    }

    //prove the postconditions
    l"""{
        //true in both the if and the else
        1. max >= x                 premise     //proves postcondition 1 
        2. max >= y                 premise     //proves postcondition 2

        //first was true in if, second true in else
        3. max == x v max == y      premise     //proves postcondition 3
    }"""

    return max
}

////////////// Test code /////////////////

val num1: Z = 3
val num2: Z = 2

//findMax has no preconditions, so nothing to prove here

val biggest: Z = findMax(num1, num2)

l"""{
    1. biggest >= num1                      premise     //findMax postcondition 1
    2. biggest >= num2                      premise     //findMax postcondition 2
    3. biggest == num1 v biggest == num2    premise     //findMax postcondition 3

    //pull in the initial values
    4. num1 == 3                            premise
    5. num2 == 2                            premise

    6. biggest >= 3                         algebra 1 4
    7. biggest >= 2                         algebra 2 5
    8. biggest == 3 v biggest == num2       subst1 4 3
    9. biggest == 3 v biggest == 2          subst1 5 8

    //OR-elimination
    10. {
        11. biggest == 3                    assume
    }
    12. {
        13. biggest == 2                    assume
        14. ¬(biggest >= 3)                 algebra 6 13
        15. ⊥                               ¬e 6 14
        16. biggest == 3                    ⊥e 15
    }
    17. biggest == 3                        ve 9 10 12  //needed for assert
}"""

assert(biggest == 3)
