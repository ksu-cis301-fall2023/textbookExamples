//In this example, we write a plusOne function that takes a non-negative parameter and returns one more than that parameter:

import org.sireum.logika._

def plusOne(n: Z): Z = {
    l"""{
        requires n >= 0         //precondition: parameter should be non-negative
        ensures result == n+1   //postcondition 1: we promise returned value is one more than parameter
            result > 0          //postcondition 2: we promise returned value is greater than 0
    }"""


    val answer: Z = n+1
    l"""{
        1. n >= 0               premise     //from the precondition
        2. answer == n+1        premise     //from the "answer = n+1" assignment
                                            //proves the first postcondition

        3. answer > 0           algebra 1 2 //proves the second postcondition
    }"""

    return answer
}

////////// Test code ///////////////

var x: Z = 5

l"""{
    1. x == 5                   premise     //from the "x=5" assignment
    2. x >= 0                   algebra 1   //proves the plusOne precondition
}"""

var added: Z = plusOne(x)

l"""{
    //I can list the postcondition (what is returned) as a premise
    1. x == 5                   premise     //x is unchanged 
    2. added == x+1             premise     //plusOne postcondition 1
    3. added > 0                premise     //plusOne postcondition 2
    4. added == 6               algebra 1 2
    5. added == 6 
}"""

assert(added == 6 âˆ§ added > 0)
