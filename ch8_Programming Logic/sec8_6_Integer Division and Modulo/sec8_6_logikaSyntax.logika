//Consider the following Logika program:

import org.sireum.logika._

var num: Z = readInt("Enter positive number: ")

assume(num > 0)
val orig: Z = num

num = num * 2

assert(num % 2 == 0)

num = num + 2

assert(num % 2 == 0)

num = num/2 - 1

assert(num == orig)


import org.sireum.logika._

var num: Z = readInt("Enter positive number: ")

assume(num > 0)
val orig: Z = num
num = num * 2

l"""{
    1. num == num_old * 2           premise     //we updated num to be its old value times 2
    2. orig == num_old              premise     //orig equaled the old value of num (before our change)
    3. num == orig * 2              algebra 1 2 //express the new value of num without referring to "_old"
    4. 2 > 0                        algebra     //needed to use modulo in step 7
    5. num_old > 0                  premise     //we assumed the old value of num (before its change) was > 0
    6. num >= 0                     algebra 1 5 //needed to use modulo in step 7
    7. num % 2 == 0                 algebra 1   //we have showed num is now even (needed for next assert)
}"""

assert(num % 2 == 0)

num = num + 2 

l"""{
    1. num == num_old + 2               premise     //we updated num to be its old value plus 2
    2. num_old >= 0                     premise     //from line 6 in previous block, but num has since changed
    3. num_old % 2 == 0                 premise     //from line 7 in previous block, but num has since changed

    //we know 2 > 0 from previous block - don't need to restate here

    4. num >= 0                         algebra 1 2 //needed to use modulo in step 5 (need to redo since num has changed)
    5. num % 2 == 0                     algebra 1 3 //we have showed num is still even (needed for next assert)
    6. num_old == orig * 2              premise     //from line 3 in block above, but num has since changed
    7. num - 2 == orig * 2              algebra 1 6 //express new value of num without using "_old"
}"""

assert(num % 2 == 0)

l"""{
    1. 2 != 0                       algebra     //needed for dividing by 2
}"""

num = num/2 - 1

l"""{
    1. num == num_old/2 - 1             premise     //we updated num to be its old value divided by 2 minus 1
    2. num_old - 2 == orig * 2          premise     //from line 7 in previous block, but num has since changed
    3. num_old == orig * 2 + 2          algebra 2
    4. num == (orig * 2 + 2)/2 - 1      algebra 1 3 //express new value of num without using "_old"
    5. num == orig + 1 - 1              algebra 4
    6. num == orig                      algebra 5   //we have showed num is back to being orig (needed for last assert)
                                                    //could have skipped straight here with "algebra 1 2"

assert(num == orig)
